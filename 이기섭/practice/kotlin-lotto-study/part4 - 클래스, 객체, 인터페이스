# 4장 클래스, 객체, 인터페이스

- 클래스와 인터페이스
- 뻔하지 않은 생성자와 프로퍼티
- 데이터 클래스
- 클래스 위임
- object 키워드 사용

## 4.1 클래스 계층 정의

### 4.1.1 코틀린 인터페이스
```kotlin
interface Clickable {
    fun click()
}
```
- Unit  이라는 값을 반환 , 자바의 void 에 대응하는 코틀린의 요소

```kotlin
class Button: Clickable {
    override fun click() = println("I was clicked")
}

fun main() {
    Button().click()
}
```

- 구현 시 override 변경자 필수
- 확장은 하나만, 인터페이스는 제한 없이 구현

시그니처가 같은 두 인터페이스의 showOff 오버라이드

```kotlin
interface Clickable {
    fun click();
    fun showOff() = println("옷차!")
}

interface Focusable {
    fun setFocus(b: Boolean) = println("I ${if (b) "got" else "lost"} focus.")

    fun showOff() = println("으으읏차!")
}

class Button : Clickable, Focusable {
    override fun click() = println("i was clicked")

    override fun showOff() {
        super<Clickable>.showOff()
        super<Focusable>.showOff()
    }
}

fun main(args: Array<String>) {
    val button = Button()
    button.showOff()
    
    button.setFocus(true)
    button.click()
}
```
- 단, 자바코드에서 코틀린 인터페이스의 디폴트 구현은 사용할 수 없음.

### 4.1.2 open, fuinal, abstract 변경자: 기본적으로 final

- 코틀린에서 모든 클래스와 메서드는 기본적으로 final로 하위클래스를 만들 수 없고, 오버라이드 불가
- 이는 자바와 반대로 자바의 경우 기본적으로 모든 클래스, 메서드를 하위에서 오버라이드 가능.
- 이펙트브 자바에서는 상속을 위한 설계와 문서를 갖출 수 없다면 상속을 금지하라는 조언을 할 정도로 설계자가 의도치 않은 오버라이딩이 이루어 질 수 있음.
- 자바에서 오버라이드 의도되지 않은 메서드가 아니라면 final 로 선언하자.
- 코틀린에서는 상속을 허용하려면 open 변경자 사용

```kotlin
open class RichButton: Clickable {
    fun disable() {}
    open fun animate() {}
    override fun click(){}
}
```
```kotlin
class ThemedButton : RichButton() {
    override fun animate(){}   //open 되어 오버라이드 가능
    override fun click(){}     //오버라이딩만하고 final 지정은 안했기 때문에 오버라이딩 가능
    override fun showOff(){}   //오버라이딩은 안했지만 final 지정 안되있기 때문에 오버라이딩 가능
}
```

- 추상클래스
```kotlin
abstract class Animated {
    abstract val animationSpeed: Double //추상프로퍼티 - 하위에서 반드시 제공해줘야함.
    val keyframes: Int = 20 //final
    open val frames: Int = 60 //open 가능
    
    abstract fun animate() //추상메소드 - 하위에서 반드시 구현
    open fun stopAnimating() {} //open 가능
    fun animateTwice(){} //final 
}
```

### 4.1.3 가시성 변경자: 기본적으로 공개

- public, protected, private 
```kotlin
internal open class TalkativeButton {
    private fun yell() = println("Hey!")
    protected fun whisper() = println("")
}

fun TalkativeButton.giveSpeech() {
    yell()
    
    whisper()
}
```

- protected : 자바와 다름 , 코틀린에서는 하위 클래스 안에서만 볼 수 있음.

### 4.1.4 내부 클래스와 내포된 클래스: 기본적으로 내포 클래스

```kotlin
interface State: Serializable

interface View {
    fun getCurrentState(): state
    fun restoreState(state: State) {}
}
```

```kotlin
class Outer {
    inner class Inner {
        fun getOuterRefference(): Outer = this@Outer
    }
}
```
- 내포클래스 : 명시적으로 요청하지 않는 한 바깥쪽 클래스 인스턴스에 대한 접근 권한이 없다. 자바 : static class, 코틀린 : class
- 내부 클래스 : 바깥쪽 클래스에 대한 참조를 저장함 , 자바 : class , 코틀린 : inner class
- 바깥쪽 클래스 Outer의 참조에 접근하려면 this@Outer 

### 4.1.5 봉인된 클래스: 확장이 제한된 클래스 계층 정의
- sealed 변경자 (추상 클래스)
  - 인터페이스 에도 가능(sealed interface)
- 컴파일 전에 정의가 되어있어야 함 (else 필요없음)
- 근데 저 Expr 에 붙어있는 () 는 뭘까

```kotlin
sealed class Expr
class Num(val value: Int) : Expr()
class Sum(val left: Int, val rigth: Int) : Expr() 

fun eval(e: Expr){
    when(e) {
        is Num -> e.value
        is Sum -> eval(e.left) + eval(e.rigth)
    }
}
```

## 4.2 뻔하지 않은 생성자나 프로퍼티를 갖는 클래스 선언
- 코틀린은 주 생성자(primary constructor, 본문 밖에 정의) , 부 생성자(secondary constructor, 본문 안에 정의)를 구분

### 4.2.1 클래스 초기화: 주 생성자와 초기화 블록
- init : 초기화 블록

```kotlin
//3가지 다 같은 목적
class User constructor(_nickname: String) {
    val nickname: String
    
    init{
        nickname = _nickname
    }
    
}

class User(_nickname: String) {
  val nickname = _nickname
}

class User(_nickname: String)

```

### 4.2.2 ~ 4.3.2 노트북으로 진행했으나 노트북에 이슈가 있어 추후 업로드 하겠습니다.

- 코틀린 데이터 클래스와 자바 레코드 비교
  - 모든 프로퍼티가 private이며 final이어야 한다.
  - 레코드는 상위 클래스를 확장할 수 없다.
  - 클래스 본문 안에서 다른 프로퍼티를 정의할 수 없다.

## 4.4 object 키워드 : 클래스 선언과 인스턴스 생성을 한꺼번에 하기
- 객체선언 : 싱글턴을 정의하는 한가지 방법
- 동반 객체: 어떤 클래스와 관련이 있지만 호출하기 위해 그 클래스 객체가 필요하지 않은 메서드와 팩토리 메서드를 담을 때
- 객체 식 : 자바의 익명 내부 클래스 대신

### 4.1.1 객체 선언: 싱글턴 쉽게 만들기

- object 키워드로 객체선언
- 클래스 정의, 클래스의 인스턴스를 만들어 변수에 저장을 한문장으로
- 프로퍼티, 메서드, 초기화 블록 사용 가능
- 생성자 선언 불가

```kotlin
object Paroll { 
    val allEmployees = arrayListOf<Person>()
    fun calculateSalary() {
        for (person in allEmployees) {
            // 동작
        }
    }
}
```

객체 선언을 사용해 Comparator 구현
```kotlin
object CaseInsensitiveFileComparator : Comparator<File> {
    override fun compare(file1: File, file2:File) : Int {
        return file1.path.compareTo(file2.path, ignoreCase = true)
    }
}

fun main() {
    println(
      CaseInsensitiveFileComparator.compare(
        File("/User"), File("/user") 
      )
      //0
    )
}
```

내포 객체를 사용해 Comparator 구현하기
```kotlin
data class Person(val name: String){
    object NameComparator : Comparable<Person> {
        override fun compare(p1: Person, p2: Person): Int = 
            p1.name.compareTo(p2.name)
    }
}

fun main() {
    val persons = listOf(Person("Bob"), Person("Alice"))
    println(persons.sortedWith(Person.NameComparator))
    //[Person(name=Alice), Person(name=Bob)]
}
```

### 4.4.2 동반 객체: 팩토리 메서드와 정적 멤ㅓ가 들어갈 장소
- 코틀린 언어는 자바 static 키워드를 지원하지 않음
- 대신, 패키지 수준의 최상위 함수와 객체 선언

```kotlin
class MyClass {
    companion object {
        fun callMe() {
            println("")
        }
    }
}

fun main() {
    MyClass.callMe();
}
```

부 생성자가 여럿 있는 클래스 정의하기
```kotlin
class User {
    val nickname: String
    
    constructor(email: String){
        nickname = email.substringBefore('@')
    }
    
    constructor(socialAccountid: Int) {
        nickname = getSocialNetworkName(socialAccountId)
    }
}
```

부 생성자를 팩토리 메서드로 대신하기
```kotlin
class User private constructor(val nickname: String) {
    companion object {
        fun newSubscribingUser(email: String) = User(email.substringBefore('@'))
        fun newSocialUser(accountId: Int) = User(getNameFromSocialNetwork(accountId))
    }
}
```

###4.4.3 동반 객체를 일반 객체처럼 사용
- 동반 객체에 이름 붙이기 가능. ex) Person > companion obejct Loader {....} -> Person.Loader.method()
- 디폴트는 Companion ex) Person.Companion.method()
- 자바와의 상호운용성을 위해 @JvmStatic 선언하면 자바에서 사용 가능. 
- 동반객체는 확장함수로 정의해서 확장 가능

동반객체 인터페이스 구현
```kotlin
interface JSONFactory<T> {
  fun fromJSON(jsonText: String): T
}

class Person(val name: String) {
    companion object : JSONFactory<Person> {
        override fun fromJSON(jsonText:String) : Person = //구현부
    }
}
```

###4.4.4 객체 식: 익명 내부 클래스를 다른 방식으로 작성
- 상당히 유연하다. 인터페이스를 하나 구현, 여럿 구현, 구현하지 않을 수도 있음
- 객체 식 안의 코드도 그 식이 포함된 함수의 변수에 접근 할 수 있다. 
- 자바와 달리 final이 아닌 변수도 객체 식 안에서 사용할 수 있다. (로컬변수의 값 변경 가능)

코틀린 이벤트 리스너 구현
```kotlin
interface MouseListener {
    fun onEnter()
    fun onClick()
}

class Button(private val listener: MouseListener){}

fun main(){
    Button(object: MouseListener{
        override fun onEnter() {
            println("on Enter")
        }
        override fun onClieck() {
            println("on Click")
        }
    })
}
```

###4.5 부가 비용 없이 타입 안정성 추가: 인라인 클래스
- 불필요하게 객체를 생선하는 비용을 줄일 수 있다.
- 실생 히점에 인스턴스는 감싸진 프로퍼티로 대체된다.
- 클래스가 프로퍼티를 하나만 가져야 한다.
- 주 생성자에서 초기화되어야 한다
- 클래스 계층에 참여하지 않는다(상속 x , 다른클래스에서 상속도 x)

```kotlin
interface PrettyPrintable {
    fun prettyPrint()
}

@JvmInline
value class UsdCent(val amount: Int) : PrettyPrintable {
    val salesTax get() = amount * 0.06
  override fun prettyPrint() = println("${amount}")
}

fun main() {
    val expens = UsdCent(1_99)
    println(expens.salesTax)
    
    println(expens.prettyPrint())
}
```

